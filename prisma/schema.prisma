generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoUnidade {
  PECA
  KIT
  JOGO
}

enum CartStatus {
  ATIVO
  FINALIZADO
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDENTE
  FINALIZADO
  CANCELADO
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] // Relacionamento 1:N com Product
}

model Administrator{
  id Int @id @default(autoincrement())
  name String 
  login String @unique
  password String
  role Role
}
model Acessos{
  id Int @id @default(autoincrement())
  usuario String
  tipo_usuario Role
  data_acesso DateTime
}
model Model {
  id       Int            @id @default(autoincrement())
  name     String
  marca    String
  ano      String
  products ProductModel[] // Relacionamento N:N com Product
}

model Address {
  id      Int       @id @default(autoincrement())
  estado  String
  cidade  String
  bairro  String
  rua     String
  numero  String
  cep     String
  User User[]
}

model Contato {
  id Int @id @default(autoincrement())
  telefone String
  email String?
  User User[]
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  tipo       TipoUsuario  // Define se o usuário é pessoa física ou empresa
  role       Role      @default(CLIENT)
  cpf        String   @unique  // Somente se for PESSOA_FISICA
  cnpj       String?   @unique  // Somente se for EMPRESA
  enderecoId Int?
  endereco   Address?  @relation(fields: [enderecoId], references: [id])
  contatoId  Int?
  contato    Contato?  @relation(fields: [contatoId], references: [id])
  password   String
  orders     Order[]
  carts      Cart[]
  ultimo_acesso DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime?

}

enum TipoUsuario {
  PESSOA_FISICA
  EMPRESA
}



model Product {
  id           Int                 @id @default(autoincrement())
  name         String
  code         String
  description  String
  tipo         TipoUnidade
  price        Float
  priceoast    Float
  categoryId   Int?                @map("category_id") // Chave estrangeira
  category     Category?           @relation(fields: [categoryId], references: [id])
  imageUrl     String?
  cartItems    CartItem[]
  models       ProductModel[] // Relacionamento N:N com Model
  fornecedores ProductFornecedor[] // Relacionamento N:N com Fornecedor
}

model Fornecedor {
  id       Int                 @id @default(autoincrement())
  name     String
  code     String
  products ProductFornecedor[] // Relacionamento N:N com Product
}

/// Tabela de junção para Produto x Fornecedor (N:N)
model ProductFornecedor {
  productId    Int
  fornecedorId Int

  product    Product    @relation(fields: [productId], references: [id])
  fornecedor Fornecedor @relation(fields: [fornecedorId], references: [id])

  @@id([productId, fornecedorId]) // Chave composta para evitar duplicidade
}

model ProductModel {
  productId Int
  modelId   Int

  product Product @relation(fields: [productId], references: [id])
  model   Model   @relation(fields: [modelId], references: [id])

  @@id([productId, modelId]) // Chave composta para evitar duplicidade
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  status    CartStatus @default(ATIVO)
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id        Int         @id @default(autoincrement())
  empresaId Int
  user      User        @relation(fields: [empresaId], references: [id])
  items     Json
  total     Float
  status    OrderStatus @default(PENDENTE)
  createdAt DateTime    @default(now())
}

model Carrousel{
  id Int @id @default(autoincrement())
  active Boolean @default(false)
  imgUrl String[]
}
